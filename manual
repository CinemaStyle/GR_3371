# Инструкция для работы с Markdowwn

## Выделение текста
Чтобы выделить текст курсивом необходимо обрамить его звездочками (*) знаком нижнего подчеркивания (_). Например, *вот так* или _вот так_

Чтобы выделить текст полужирным, необходимо обрамить его двойными звездочками (**)или двойным знаком нижнего подчеркивания (__). Например, **вот так** или __вот так__

Альтернативные способы выделения текста жирным или курсивом нужны для того, чтобы мы могли совмещать оба этих способа. Например, _текст может быть выделен курсивом и при этом быть **полужирным**_.

## Списки
Чтобы добавить ненумерованные списки, необходимо пункты выделить звездочкой(*) или знаком (+). Например, вот так:
* Элемент 1
* Элемент 2
* Элемент 3
+ Элемент 4

Чтобы добавить нумерованные списки, необходимо пункты просто пронумеровать. Например, вот так:
1. Первый пункт
2. Второй пункт

## Работа с изображениями

Чтобы вставить изображения в текст, достаточно написать следующее:
![Привет, это кот!](kot.jpg)

## Ссылки

## Работа с таблицами

## Цитаты

## Заключение






## Что такое git

**Git** - это одна из реализаций распределённых систем контроля версий, имеющая как и локальные, так и удалённые репозитории. Является самой популярной реализацией систем контроля версий в мире.

## Подготовка репозитория
Для создание репозитория необходимо выполнить команду *git init* в папке с репозиторием и у Вас создаться репозиторий (появится скрытая папка .git)

## Создание "сохранений" (тут и add, и status, и commit)

 - Просмотр изменений
Команда *git diff* используется для вычисления разницы между любыми двумя **Git** деревьями. Это может быть разница между вашей рабочей директорией и индексом (собственно *git diff*), разница между индексом и последним коммитом (*git diff --staged*), или между любыми двумя коммитами (*git diff master branchB*).

- Создание коммитов
Для добавления измений в коммит используется команда *git add*. Чтобы использовать команду *git add* напишите *git add <имя файла>*

- Просмотр состояния репозитория
Для того, чтобы посмотреть состояние репозитория используется команда *git status*. Для этого необходимо в папке с репозиторием написать *git status*, и Вы увидите были ли измения в файлах, или их не было.
- Создание коммитов
Для того, чтобы создать коммит(сохранение) необходимо выполнить команду *git commit*. Выполняется она так: *git commit -m "<сообщение к коммиту>*. Все файлы для коммита должны быть ДОБАВЛЕНЫ и сообщение к коммиту писать **ОБЯЗАТЕЛЬНО**.

## Перемещение между сохранениями (обязательно про возврат в конце на конец ветки master)

Для того, чтобы перемещаться между коммитами, используется команда *git checkout*. Используется она в папке с пепозиторием следующим образом: *git checkout <номер коммита>*

## Журнал изменений (git log)

Для того, чтобы посмтреть все сделанные изменения в репозитории, используется команда *git log*. Для этого достаточно выполнить команду *git log* в папке с репозиторием

## Ветки а git

Команда *git branch* выводит на экран список имеющихся у нас веток.

Команда *git log --graph* выводит графический лог всех наших веток

Создание новой ветки, команда  *git branch (название ветки)*. Либо команда *git checkout -b (название ветки)*, при этом мы сразу переходим в созданную ветку.

## Слияние веток и решение конфликтов

Для слияния веток выполним *git merge* и укажем ветку, которую необходимо добавить. При этом указанная ветка вольется в ту, в которой мы в данный момент находимся.

## Удаление веток

Для удаления ненужной более ветки используем команду *git branch -d (название ветки)*. Где параметр d сокращение от deleted (с англ. удалить).

## Сравнение веток

Для сравнения входных наборов данный и отображения различия между ними используется команда *git diff*

## Получение справки

Для получения справки прописываем (--help) в конце. Например  git --help ,  git log --help , git commit --help 




# Работаем с Github

1. Создали аккаунт на github.com

2. Создали локальный репозиторий

3. "Подружили" локальный и удаленный репозитории. Github при создании нового репозитория подскажет, как это можно сделать.

4. Отправить (push) локальный репозатарий в удаленный (на Github), при этом вам, возможно, нужно будет авторизоваться на удаленном репозитарии.

5. Протзвести изменения " с другого компьютера".

6. "Выкачать" (pull) актуальное состояние из удаленного репозитария.





# Работаем с чужим репозиторием

1. Делаем форк (fork) интересуещего нас репозитория

2. Делаем git clone для нашей версии этого репозитория

3. Создаем ветку с предлогаемыми изменениями

4. Производим все изменения только в этой ветке

5. Отправляем эти изменения на свой аккаунт (push)

6. В окне на Github появляется возможность отправить pull request





